var dependencies=["ui.router","ui.bootstrap","ngStorage","ngResource"],kgroups=angular.module("kgroups",dependencies);kgroups.run(["$rootScope","$http","$location","$localStorage",function(e,r,o,s){s.token&&(r.defaults.headers.common["x-access-token"]=s.token),e.$on("$locationChangeStart",function(e,r,t){var n=["/","/login","/login-failed","/auth"],a="/"+o.path().split("/")[1];-1===n.indexOf(a)&&!s.token&&o.path("/login")}),e.$on("$stateChangeSuccess",function(e,r,o,s,t){$state.current=r})}]),kgroups.config(["$httpProvider",function(e){e.interceptors.push("ResponseObserver")}]);var AuthController=function(e,r,o,s,t,n){var a=o.token,l="true"===o.admin,u="true"===o.instructor;console.log(o),console.log(l),console.log(u),t(function(){s.token=a,s.is_admin=l,s.is_instructor=u,n.defaults.headers.common["x-access-token"]=s.token,r.url("/progress")})};AuthController.$inject=["$scope","$location","$stateParams","$localStorage","$timeout","$http"],kgroups.controller("AuthController",AuthController);var ResponseObserver=function(e,r){return{responseError:function(o){switch(o.status){case 403:console.log("API Access denied"),r.path("/login")}return e.reject(o)}}};ResponseObserver.$inject=["$q","$location"],kgroups.factory("ResponseObserver",ResponseObserver);var CourseClusterController=function(e,r,o,s){var t=r.courseId;e.loading=!0,e.clusters=o.clusters({id:t}).$promise.then(function(r){e.clusters=r,e.loading=!1}),e.getUserById=function(r){for(var o=0;o<e.course.members.length;o++)if(r===e.course.members._id)return e.course.members},e.createChannels=function(){s.createChannels({courseId:t})}};CourseClusterController.$inject=["$scope","$stateParams","Course","Slack"],kgroups.controller("CourseClusterController",CourseClusterController);var CourseConfigController=function(e,r){};CourseConfigController.$inject=["$scope","Course"],kgroups.controller("CourseConfigController",CourseConfigController);var CourseController=function(e,r,o,s){var t=r.courseId;o.get({id:t}).$promise.then(function(r){e.course=r,e.members={};for(var o=0;o<e.course.members.length;o++)e.members[e.course.members[o].id]=e.course.members[o]}),e.clusters=o.clusters({id:t}),e.addTask=function(r){e.course.tasks.splice(e.course.tasks.indexOf(r)+1,0,{}),console.log(e.course.tasks),e.course.tasks.join()},e.saveCourse=function(e){for(var r=0;r<e.tasks.length;r++)e.tasks[r].due&&(e.tasks[r].due=new Date(e.tasks[r].due).toISOString());e.$save()},e.getUserById=function(r){for(var o=0;o<e.course.members.length;o++)if(r===e.course.members._id)return e.course.members},e.createChannels=function(){s.createChannels({courseId:t})}};CourseController.$inject=["$scope","$stateParams","Course","Slack"],kgroups.controller("CourseController",CourseController);var CourseCreateController=function(e,r,o){e.tasks=[{}],e.date=null,e.addTask=function(r){e.tasks.splice(e.tasks.indexOf(r)+1,0,{}),console.log(e.tasks),e.tasks.join()},e.createCourse=function(s){s.tasks=e.tasks,new o(s).$save(function(e){var o=e._id;r.path("/course/"+o+"/task")})}};CourseCreateController.$inject=["$scope","$location","Course"],kgroups.controller("CourseCreateController",CourseCreateController);var CourseIndexController=function(e,r,o){e.loading=!0,e.courses=o.manages().$promise.then(function(r){e.loading=!1,e.courses=r})};CourseIndexController.$inject=["$scope","$stateParams","Course"],kgroups.controller("CourseIndexController",CourseIndexController);var CourseMemberController=function(e,r,o,s){var t=r.courseId;e.loading=!1,e.course=o.get({id:t}),e.sync=function(){e.loading=!0,s.syncMembership({courseId:t}).$promise.then(function(r){e.course.members=r.members,e.loading=!1})}};CourseMemberController.$inject=["$scope","$stateParams","Course","Slack"],kgroups.controller("CourseMemberController",CourseMemberController);var CourseTaskController=function(e,r,o){var s=r.courseId;e.saveState={msg:"Save Changes",state:0},e.loading=!0,e.course=o.get({id:s}).$promise.then(function(r){e.loading=!1,e.course=r}),e.addTask=function(r){e.course.tasks.splice(e.course.tasks.indexOf(r)+1,0,{}),console.log(e.course.tasks),e.course.tasks.join()},e.removeTask=function(r){e.course.tasks.splice(e.course.tasks.indexOf(r),1)},e.saveCourse=function(r){e.saveState.msg="Saving...",e.saveState.state=1,r.$save().then(function(){e.saveState.msg="Save Changes",e.saveState.state=0})}};CourseTaskController.$inject=["$scope","$stateParams","Course"],kgroups.controller("CourseTaskController",CourseTaskController);var courseNav=function(){return{templateUrl:"app/modules/course/directives/courseNav/courseNav.html",controller:["$scope","$state",function(e,r){e.page=r.current.name,e.$watch(function(){return r.current.name},function(o,s){o!==s&&(e.page=r.current.name)})}]}};kgroups.directive("courseNav",courseNav);var Course=function(e){return e("/api/course/:id",{id:"@_id"},{enrolled:{method:"GET",isArray:!0,url:"/api/course/enrolled"},manages:{method:"GET",isArray:!0,url:"/api/course/manages"},clusters:{method:"GET",isArray:!0,url:"/api/cluster/:id"}})};Course.$inject=["$resource"],kgroups.service("Course",Course);var topNav=function(){return{templateUrl:"app/modules/navs/directives/topNav/topNav.html",controller:["$scope","$state","$location","$localStorage","$http",function(e,r,o,s,t){e.page=r.current.name,e.is_admin=s.is_admin,e.is_instructor=s.is_instructor,e.$watch(function(){return r.current.name},function(o,s){o!==s&&(e.page=r.current.name)}),e.isCourseSubPage=function(){var r=e.page;return"courseIndex"===r||"courseCreate"===r||"course.task"===r||"course.member"===r||"course.cluster"===r||"course.config"===r},e.logout=function(){delete t.defaults.headers.common["x-access-token"],s.$reset(),o.path("/login")}}]}};kgroups.directive("topNav",topNav);var ProgressController=function(e,r,o,s,t){var n=r.courseId,a=!1;e.saveState="Saved";var l=function(e,r){if(r)for(var o=0;o<r.length;o++)if(r[o].taskId===e)return r[o];return!1};t.get({id:n}).$promise.then(function(r){e.course=r,s.get({id:n}).$promise.then(function(o){e.progress=o;for(var s=0;s<r.tasks.length;s++){var t=l(r.tasks[s]._id,o.tasks);r.tasks[s].status=t?t.status:"Not Started"}})}),e.updateStatus=function(r){switch(e.saveState="Saving...",a=!0,r.status){case void 0:case"Not Started":r.status="In Progress";break;case"In Progress":r.status="Completed";break;case"Completed":default:r.status="Not Started"}};o(function(){if(a){for(var r=[],o=0;o<e.course.tasks.length;o++){var s=e.course.tasks[o]._id,t=e.course.tasks[o].status;void 0===t&&(t="Not Started"),r.push({taskId:s,status:t}),e.progress.tasks=r}void 0===e.progress._id&&(e.progress.course=e.course._id),e.progress.$save().then(function(){e.saveState="Saved"}),a=!1}},500)};ProgressController.$inject=["$scope","$stateParams","$interval","Progress","Course"],kgroups.controller("ProgressController",ProgressController);var ProgressIndexController=function(e,r){e.loading=!0,e.courses=r.enrolled().$promise.then(function(r){e.courses=r,e.loading=!1})};ProgressIndexController.$inject=["$scope","Course"],kgroups.controller("ProgressIndexController",ProgressIndexController);var Progress=function(e){return e("/api/progress/:id",{id:"@_id"})};Progress.$inject=["$resource"],kgroups.service("Progress",Progress),kgroups.config(["$stateProvider",function(e){var r={name:"courseIndex",url:"/course",templateUrl:"app/modules/course/views/index.html",controller:"CourseIndexController"},o={name:"courseCreate",url:"/course/create",templateUrl:"app/modules/course/views/create.html",controller:"CourseCreateController"},s={abstract:!0,name:"course",url:"/course/:courseId",templateUrl:"app/modules/course/views/template.html"},t={name:"course.task",url:"/task",templateUrl:"app/modules/course/views/task.html",controller:"CourseTaskController"},n={name:"course.member",url:"/member",templateUrl:"app/modules/course/views/member.html",controller:"CourseMemberController"},a={name:"course.config",url:"/config",templateUrl:"app/modules/course/views/config.html",controller:"CourseController"},l={name:"course.cluster",url:"/cluster",templateUrl:"app/modules/course/views/cluster.html",controller:"CourseClusterController"};e.state(o),e.state(r),e.state(s),e.state(t),e.state(n),e.state(a),e.state(l)}]),kgroups.config(["$stateProvider","$urlRouterProvider",function(e,r){var o={name:"login",url:"/",templateUrl:"app/modules/external/views/login.html"},s={name:"signin-failed",url:"/signin-failed",templateUrl:"app/modules/external/views/signin-failed.html"};e.state(o),e.state(s),r.otherwise("/")}]),kgroups.config(["$stateProvider",function(e){var r={name:"profile",url:"/profile",templateUrl:"app/modules/user/views/profile.html",controller:"ProfileController"},o={name:"authed",url:"/auth/:token/:admin/:instructor",controller:"AuthController"},s={name:"admin",url:"/admin",templateUrl:"app/modules/user/views/admin.html",controller:"AdminController"};e.state(r),e.state(o),e.state(s)}]),kgroups.config(["$stateProvider",function(e){var r={name:"progressIndex",url:"/progress",templateUrl:"app/modules/progress/views/index.html",controller:"ProgressIndexController"},o={name:"progressView",url:"/progress/:courseId",templateUrl:"app/modules/progress/views/view.html",controller:"ProgressController"};e.state(r),e.state(o)}]);var Slack=function(e){return e("/api/slack/:courseId",{courseId:"@courseId"},{syncMembership:{method:"GET",isArray:!1,url:"/api/slack/:courseId/sync"},createChannels:{method:"GET",isArray:!1,url:"/api/slack/:courseId/channels"}})};Slack.$inject=["$resource"],kgroups.service("Slack",Slack);var AdminController=function(e,r,o,s,t){e.users=t.query(),e.impersonate=function(e){t.impersonate({id:e}).$promise.then(function(e){var t=e.token;r.token=t,o(function(){r.token=t,s.defaults.headers.common["x-access-token"]=r.token})})},e.grantAdmin=function(e){e.is_admin=!0,e.$save().then(function(r){e=r})},e.revokeAdmin=function(e){e.is_admin=!1,e.$save().then(function(r){console.log(r),e=r})},e.grantInstructor=function(e){e.is_instructor=!0,e.$save().then(function(r){e=r})},e.revokeInstructor=function(e){e.is_instructor=!1,e.$save().then(function(r){e=r})}};AdminController.$inject=["$scope","$localStorage","$timeout","$http","User"],kgroups.controller("AdminController",AdminController);var ProfileController=function(e,r){e.user=r.me()};ProfileController.$inject=["$scope","User"],kgroups.controller("ProfileController",ProfileController);var User=function(e){return e("/api/user/:id",{id:"@_id"},{me:{method:"GET",isArray:!1,url:"/api/user/me"},impersonate:{method:"GET",isArray:!1,url:"/api/impersonate/:id"}})};User.$inject=["$resource"],kgroups.service("User",User);